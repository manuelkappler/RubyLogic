<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
<script src='https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>
%link(rel="stylesheet" type="text/css" href="styles.css")

:javascript 
  MathJax.Hub.Config({
      jax: ["input/TeX","output/HTML-CSS"],
      displayAlign: "left"
  });

  function getBaseUrl() {
      return window.location.href.match(/^.*\//);
  }

  function get_laws(id){
    $('#availablelaws span').remove();
    $.get(getBaseUrl() + "get_laws/" + id, function(data){
      var lawdiv = $("#availablelaws");
      $.each(data, function(index, value){
        if (value == true){
          lawdiv.append('<div class="law_item" id="' + index + '"> ' + index +'</div>');
          }
        else{
          var law = index
          $.each(value, function(index, value){
            lawdiv.append('<div class="law_item" id="' + law + '_' + index + '"> ' + law + ': ' + value +'</div>');
          })
        }

      });
      })
    $('#select_law').css('visibility', 'visible');
  }

  
  function refresh_proof_table(data){
    $('#prooftable tbody tr').remove();
    $.each(data, function(index, value){
      var newrow = ('<tr><td>' + value[0] + '</td><td> <span id="proofrow' + index + '">' + value[1] + '</span></td><td><span id="lawrow' + index + '">' + value[2] + '</span></td><td>' + value[3] + '</td></tr>');
      $('#prooftable tbody').append(newrow)
      var proofspan = $("#proofrow" + index).get();
      MathJax.Hub.Queue(["Typeset", MathJax.Hub, proofspan]);
      var lawspan = $("#lawrow" + index).get();
      MathJax.Hub.Queue(["Typeset", MathJax.Hub, lawspan]);
    });
  }

  function refresh_next_step(data){
    $('#workingon').html("")
    $.each(data.premises, function(index, value){
      var premise_separator = index + 1 < data.premises.length ? ', ' : ''
      var new_element = '<div class="wff" id="premise' + index + '"> \\(' + value + '\\)' + premise_separator + '</div>';
      $('#workingon').append(new_element);
      MathJax.Hub.Queue(["Typeset", MathJax.Hub, $('#workingon_element' + index).get()]);
    });
    $('#workingon').append('<span class="implication_separator">\\(\\models\\)</span>')
    MathJax.Hub.Queue(["Typeset", MathJax.Hub, $('.implication_separator').get()]);
    $.each(data.conclusion, function(index,value){
      var new_element = '<div class="wff" id="conclusion' + index + '"> \\(' + value + '\\) </div>';
      $('#workingon').append(new_element);
      MathJax.Hub.Queue(["Typeset", MathJax.Hub, $('#workingon_conclusion' + index).get()]);
    })
    $('#select_component').css('visibility', 'visible');
  }


  
  $(document).ready(function (){
    $("#submit").on("click", function() {
      $.post(
        getBaseUrl() + "formula_string", 
        {"premises": $("#premises").val(), "conclusion": $("#conclusion").val()}, 
        function(data){
          var data = JSON.parse(data)
          refresh_proof_table(data.proof);
          console.log(data.next_step);
          refresh_next_step(data.next_step);
        })
      });
    });

  $(document).on('click', '.law_item', function(event) {
    // TODO: ask which substitution to apply if sub-equiv selected
    console.log({"law": $(this).attr("id"), "element": $('.wff.selected').attr("id")})
    $.post(
      getBaseUrl() + "apply_law",
      {"law": $(this).attr("id"), "element": $('.wff.selected').attr("id")},
      function(data){
          console.log(data)
          if(data.message == "more"){
            refresh_proof_table(data.proof);
            console.log(data.next_step)
            refresh_next_step(data.next_step);
          }
          else{
            refresh_proof_table(data.proof);
            if(data.message == "valid"){
            $('#select_component').css("visibility", "hidden");
            $('#workingon').html("You are done. The implication is valid.")
            }
            else{
              $('#select_component').css("visibility", "hidden");
              $('#workingon').html("You are done. The implication is invalid. Counterexample:  " + data.counterexample)
            }
          }
          $('#select_law').css("visibility", "hidden")
          $('#availablelaws').html("")
        }
      );
  });

  $(document).on('click', '.wff', function(event) {
    // TODO: ask which substitution to apply if sub-equiv selected
    $('.wff.selected').removeClass("selected")
    $(this).addClass("selected")
    get_laws($(this).closest('.wff').attr("id"))
  });


%h1 Logic Proof Tool
#content
  .implication_input
    %h2 Enter your formula
    %input#premises{:type => "text"}
    ⊨
    %input#conclusion{:type => "text"}
    %input#submit{:type => "submit"}
  .proof_table
    %h2 Proof
    %table#prooftable{:style => "width: 60%"}
      %thead
        %tr
          %th.prooftable Step
          %th.prooftable Implication
          %th.prooftable Law
          %th.prooftable ✔/✘
      %tbody
  .next_step
    %h2 Next step
    .instruction#select_component    Select a component to work on
    #workingon
    .instruction#select_law    Select which law to apply
    #availablelaws
